// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofileowner"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/user"
	"github.com/google/uuid"
)

// DogProfileOwnerCreate is the builder for creating a DogProfileOwner entity.
type DogProfileOwnerCreate struct {
	config
	mutation *DogProfileOwnerMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (dpoc *DogProfileOwnerCreate) SetOwnerID(u uuid.UUID) *DogProfileOwnerCreate {
	dpoc.mutation.SetOwnerID(u)
	return dpoc
}

// SetDogID sets the "dog_id" field.
func (dpoc *DogProfileOwnerCreate) SetDogID(u uuid.UUID) *DogProfileOwnerCreate {
	dpoc.mutation.SetDogID(u)
	return dpoc
}

// SetUpdatedAt sets the "updated_at" field.
func (dpoc *DogProfileOwnerCreate) SetUpdatedAt(t time.Time) *DogProfileOwnerCreate {
	dpoc.mutation.SetUpdatedAt(t)
	return dpoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpoc *DogProfileOwnerCreate) SetNillableUpdatedAt(t *time.Time) *DogProfileOwnerCreate {
	if t != nil {
		dpoc.SetUpdatedAt(*t)
	}
	return dpoc
}

// SetCreatedAt sets the "created_at" field.
func (dpoc *DogProfileOwnerCreate) SetCreatedAt(t time.Time) *DogProfileOwnerCreate {
	dpoc.mutation.SetCreatedAt(t)
	return dpoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpoc *DogProfileOwnerCreate) SetNillableCreatedAt(t *time.Time) *DogProfileOwnerCreate {
	if t != nil {
		dpoc.SetCreatedAt(*t)
	}
	return dpoc
}

// SetID sets the "id" field.
func (dpoc *DogProfileOwnerCreate) SetID(u uuid.UUID) *DogProfileOwnerCreate {
	dpoc.mutation.SetID(u)
	return dpoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dpoc *DogProfileOwnerCreate) SetNillableID(u *uuid.UUID) *DogProfileOwnerCreate {
	if u != nil {
		dpoc.SetID(*u)
	}
	return dpoc
}

// SetOwner sets the "owner" edge to the User entity.
func (dpoc *DogProfileOwnerCreate) SetOwner(u *User) *DogProfileOwnerCreate {
	return dpoc.SetOwnerID(u.ID)
}

// SetDog sets the "dog" edge to the Dog entity.
func (dpoc *DogProfileOwnerCreate) SetDog(d *Dog) *DogProfileOwnerCreate {
	return dpoc.SetDogID(d.ID)
}

// Mutation returns the DogProfileOwnerMutation object of the builder.
func (dpoc *DogProfileOwnerCreate) Mutation() *DogProfileOwnerMutation {
	return dpoc.mutation
}

// Save creates the DogProfileOwner in the database.
func (dpoc *DogProfileOwnerCreate) Save(ctx context.Context) (*DogProfileOwner, error) {
	var (
		err  error
		node *DogProfileOwner
	)
	dpoc.defaults()
	if len(dpoc.hooks) == 0 {
		if err = dpoc.check(); err != nil {
			return nil, err
		}
		node, err = dpoc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogProfileOwnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpoc.check(); err != nil {
				return nil, err
			}
			dpoc.mutation = mutation
			if node, err = dpoc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dpoc.hooks) - 1; i >= 0; i-- {
			if dpoc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpoc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpoc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DogProfileOwner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DogProfileOwnerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dpoc *DogProfileOwnerCreate) SaveX(ctx context.Context) *DogProfileOwner {
	v, err := dpoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpoc *DogProfileOwnerCreate) Exec(ctx context.Context) error {
	_, err := dpoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpoc *DogProfileOwnerCreate) ExecX(ctx context.Context) {
	if err := dpoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpoc *DogProfileOwnerCreate) defaults() {
	if _, ok := dpoc.mutation.UpdatedAt(); !ok {
		v := dogprofileowner.DefaultUpdatedAt()
		dpoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dpoc.mutation.CreatedAt(); !ok {
		v := dogprofileowner.DefaultCreatedAt()
		dpoc.mutation.SetCreatedAt(v)
	}
	if _, ok := dpoc.mutation.ID(); !ok {
		v := dogprofileowner.DefaultID()
		dpoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpoc *DogProfileOwnerCreate) check() error {
	if _, ok := dpoc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "DogProfileOwner.owner_id"`)}
	}
	if _, ok := dpoc.mutation.DogID(); !ok {
		return &ValidationError{Name: "dog_id", err: errors.New(`ent: missing required field "DogProfileOwner.dog_id"`)}
	}
	if _, ok := dpoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DogProfileOwner.updated_at"`)}
	}
	if _, ok := dpoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DogProfileOwner.created_at"`)}
	}
	if _, ok := dpoc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "DogProfileOwner.owner"`)}
	}
	if _, ok := dpoc.mutation.DogID(); !ok {
		return &ValidationError{Name: "dog", err: errors.New(`ent: missing required edge "DogProfileOwner.dog"`)}
	}
	return nil
}

func (dpoc *DogProfileOwnerCreate) sqlSave(ctx context.Context) (*DogProfileOwner, error) {
	_node, _spec := dpoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dpoc *DogProfileOwnerCreate) createSpec() (*DogProfileOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &DogProfileOwner{config: dpoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dogprofileowner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dogprofileowner.FieldID,
			},
		}
	)
	if id, ok := dpoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dpoc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofileowner.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dpoc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofileowner.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := dpoc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofileowner.OwnerTable,
			Columns: []string{dogprofileowner.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpoc.mutation.DogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofileowner.DogTable,
			Columns: []string{dogprofileowner.DogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DogID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DogProfileOwnerCreateBulk is the builder for creating many DogProfileOwner entities in bulk.
type DogProfileOwnerCreateBulk struct {
	config
	builders []*DogProfileOwnerCreate
}

// Save creates the DogProfileOwner entities in the database.
func (dpocb *DogProfileOwnerCreateBulk) Save(ctx context.Context) ([]*DogProfileOwner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dpocb.builders))
	nodes := make([]*DogProfileOwner, len(dpocb.builders))
	mutators := make([]Mutator, len(dpocb.builders))
	for i := range dpocb.builders {
		func(i int, root context.Context) {
			builder := dpocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DogProfileOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpocb *DogProfileOwnerCreateBulk) SaveX(ctx context.Context) []*DogProfileOwner {
	v, err := dpocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpocb *DogProfileOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := dpocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpocb *DogProfileOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := dpocb.Exec(ctx); err != nil {
		panic(err)
	}
}
