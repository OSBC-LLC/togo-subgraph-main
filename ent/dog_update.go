// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofilebreed"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofileowner"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/image"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/predicate"
	"github.com/google/uuid"
)

// DogUpdate is the builder for updating Dog entities.
type DogUpdate struct {
	config
	hooks    []Hook
	mutation *DogMutation
}

// Where appends a list predicates to the DogUpdate builder.
func (du *DogUpdate) Where(ps ...predicate.Dog) *DogUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetFullName sets the "full_name" field.
func (du *DogUpdate) SetFullName(s string) *DogUpdate {
	du.mutation.SetFullName(s)
	return du
}

// SetAge sets the "age" field.
func (du *DogUpdate) SetAge(i int) *DogUpdate {
	du.mutation.ResetAge()
	du.mutation.SetAge(i)
	return du
}

// AddAge adds i to the "age" field.
func (du *DogUpdate) AddAge(i int) *DogUpdate {
	du.mutation.AddAge(i)
	return du
}

// SetWeightLbs sets the "weight_lbs" field.
func (du *DogUpdate) SetWeightLbs(f float64) *DogUpdate {
	du.mutation.ResetWeightLbs()
	du.mutation.SetWeightLbs(f)
	return du
}

// AddWeightLbs adds f to the "weight_lbs" field.
func (du *DogUpdate) AddWeightLbs(f float64) *DogUpdate {
	du.mutation.AddWeightLbs(f)
	return du
}

// SetWeightKgs sets the "weight_kgs" field.
func (du *DogUpdate) SetWeightKgs(f float64) *DogUpdate {
	du.mutation.ResetWeightKgs()
	du.mutation.SetWeightKgs(f)
	return du
}

// AddWeightKgs adds f to the "weight_kgs" field.
func (du *DogUpdate) AddWeightKgs(f float64) *DogUpdate {
	du.mutation.AddWeightKgs(f)
	return du
}

// SetSize sets the "size" field.
func (du *DogUpdate) SetSize(s string) *DogUpdate {
	du.mutation.SetSize(s)
	return du
}

// SetBirthday sets the "birthday" field.
func (du *DogUpdate) SetBirthday(t time.Time) *DogUpdate {
	du.mutation.SetBirthday(t)
	return du
}

// SetDogImgID sets the "dog_img_id" field.
func (du *DogUpdate) SetDogImgID(u uuid.UUID) *DogUpdate {
	du.mutation.SetDogImgID(u)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DogUpdate) SetUpdatedAt(t time.Time) *DogUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DogUpdate) SetNillableUpdatedAt(t *time.Time) *DogUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DogUpdate) SetCreatedAt(t time.Time) *DogUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DogUpdate) SetNillableCreatedAt(t *time.Time) *DogUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (du *DogUpdate) SetImageID(id uuid.UUID) *DogUpdate {
	du.mutation.SetImageID(id)
	return du
}

// SetImage sets the "image" edge to the Image entity.
func (du *DogUpdate) SetImage(i *Image) *DogUpdate {
	return du.SetImageID(i.ID)
}

// AddOwnerProfileIDs adds the "ownerProfiles" edge to the DogProfileOwner entity by IDs.
func (du *DogUpdate) AddOwnerProfileIDs(ids ...uuid.UUID) *DogUpdate {
	du.mutation.AddOwnerProfileIDs(ids...)
	return du
}

// AddOwnerProfiles adds the "ownerProfiles" edges to the DogProfileOwner entity.
func (du *DogUpdate) AddOwnerProfiles(d ...*DogProfileOwner) *DogUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddOwnerProfileIDs(ids...)
}

// AddBreedProfileIDs adds the "breedProfiles" edge to the DogProfileBreed entity by IDs.
func (du *DogUpdate) AddBreedProfileIDs(ids ...uuid.UUID) *DogUpdate {
	du.mutation.AddBreedProfileIDs(ids...)
	return du
}

// AddBreedProfiles adds the "breedProfiles" edges to the DogProfileBreed entity.
func (du *DogUpdate) AddBreedProfiles(d ...*DogProfileBreed) *DogUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddBreedProfileIDs(ids...)
}

// Mutation returns the DogMutation object of the builder.
func (du *DogUpdate) Mutation() *DogMutation {
	return du.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (du *DogUpdate) ClearImage() *DogUpdate {
	du.mutation.ClearImage()
	return du
}

// ClearOwnerProfiles clears all "ownerProfiles" edges to the DogProfileOwner entity.
func (du *DogUpdate) ClearOwnerProfiles() *DogUpdate {
	du.mutation.ClearOwnerProfiles()
	return du
}

// RemoveOwnerProfileIDs removes the "ownerProfiles" edge to DogProfileOwner entities by IDs.
func (du *DogUpdate) RemoveOwnerProfileIDs(ids ...uuid.UUID) *DogUpdate {
	du.mutation.RemoveOwnerProfileIDs(ids...)
	return du
}

// RemoveOwnerProfiles removes "ownerProfiles" edges to DogProfileOwner entities.
func (du *DogUpdate) RemoveOwnerProfiles(d ...*DogProfileOwner) *DogUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveOwnerProfileIDs(ids...)
}

// ClearBreedProfiles clears all "breedProfiles" edges to the DogProfileBreed entity.
func (du *DogUpdate) ClearBreedProfiles() *DogUpdate {
	du.mutation.ClearBreedProfiles()
	return du
}

// RemoveBreedProfileIDs removes the "breedProfiles" edge to DogProfileBreed entities by IDs.
func (du *DogUpdate) RemoveBreedProfileIDs(ids ...uuid.UUID) *DogUpdate {
	du.mutation.RemoveBreedProfileIDs(ids...)
	return du
}

// RemoveBreedProfiles removes "breedProfiles" edges to DogProfileBreed entities.
func (du *DogUpdate) RemoveBreedProfiles(d ...*DogProfileBreed) *DogUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveBreedProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DogUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DogUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DogUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DogUpdate) check() error {
	if v, ok := du.mutation.Age(); ok {
		if err := dog.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "Dog.age": %w`, err)}
		}
	}
	if v, ok := du.mutation.WeightLbs(); ok {
		if err := dog.WeightLbsValidator(v); err != nil {
			return &ValidationError{Name: "weight_lbs", err: fmt.Errorf(`ent: validator failed for field "Dog.weight_lbs": %w`, err)}
		}
	}
	if v, ok := du.mutation.WeightKgs(); ok {
		if err := dog.WeightKgsValidator(v); err != nil {
			return &ValidationError{Name: "weight_kgs", err: fmt.Errorf(`ent: validator failed for field "Dog.weight_kgs": %w`, err)}
		}
	}
	if _, ok := du.mutation.ImageID(); du.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Dog.image"`)
	}
	return nil
}

func (du *DogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dog.Table,
			Columns: dog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dog.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.FullName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dog.FieldFullName,
		})
	}
	if value, ok := du.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dog.FieldAge,
		})
	}
	if value, ok := du.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dog.FieldAge,
		})
	}
	if value, ok := du.mutation.WeightLbs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightLbs,
		})
	}
	if value, ok := du.mutation.AddedWeightLbs(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightLbs,
		})
	}
	if value, ok := du.mutation.WeightKgs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightKgs,
		})
	}
	if value, ok := du.mutation.AddedWeightKgs(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightKgs,
		})
	}
	if value, ok := du.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dog.FieldSize,
		})
	}
	if value, ok := du.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldBirthday,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldUpdatedAt,
		})
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldCreatedAt,
		})
	}
	if du.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dog.ImageTable,
			Columns: []string{dog.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dog.ImageTable,
			Columns: []string{dog.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.OwnerProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedOwnerProfilesIDs(); len(nodes) > 0 && !du.mutation.OwnerProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OwnerProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.BreedProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.BreedProfilesTable,
			Columns: []string{dog.BreedProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofilebreed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedBreedProfilesIDs(); len(nodes) > 0 && !du.mutation.BreedProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.BreedProfilesTable,
			Columns: []string{dog.BreedProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofilebreed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.BreedProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.BreedProfilesTable,
			Columns: []string{dog.BreedProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofilebreed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DogUpdateOne is the builder for updating a single Dog entity.
type DogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DogMutation
}

// SetFullName sets the "full_name" field.
func (duo *DogUpdateOne) SetFullName(s string) *DogUpdateOne {
	duo.mutation.SetFullName(s)
	return duo
}

// SetAge sets the "age" field.
func (duo *DogUpdateOne) SetAge(i int) *DogUpdateOne {
	duo.mutation.ResetAge()
	duo.mutation.SetAge(i)
	return duo
}

// AddAge adds i to the "age" field.
func (duo *DogUpdateOne) AddAge(i int) *DogUpdateOne {
	duo.mutation.AddAge(i)
	return duo
}

// SetWeightLbs sets the "weight_lbs" field.
func (duo *DogUpdateOne) SetWeightLbs(f float64) *DogUpdateOne {
	duo.mutation.ResetWeightLbs()
	duo.mutation.SetWeightLbs(f)
	return duo
}

// AddWeightLbs adds f to the "weight_lbs" field.
func (duo *DogUpdateOne) AddWeightLbs(f float64) *DogUpdateOne {
	duo.mutation.AddWeightLbs(f)
	return duo
}

// SetWeightKgs sets the "weight_kgs" field.
func (duo *DogUpdateOne) SetWeightKgs(f float64) *DogUpdateOne {
	duo.mutation.ResetWeightKgs()
	duo.mutation.SetWeightKgs(f)
	return duo
}

// AddWeightKgs adds f to the "weight_kgs" field.
func (duo *DogUpdateOne) AddWeightKgs(f float64) *DogUpdateOne {
	duo.mutation.AddWeightKgs(f)
	return duo
}

// SetSize sets the "size" field.
func (duo *DogUpdateOne) SetSize(s string) *DogUpdateOne {
	duo.mutation.SetSize(s)
	return duo
}

// SetBirthday sets the "birthday" field.
func (duo *DogUpdateOne) SetBirthday(t time.Time) *DogUpdateOne {
	duo.mutation.SetBirthday(t)
	return duo
}

// SetDogImgID sets the "dog_img_id" field.
func (duo *DogUpdateOne) SetDogImgID(u uuid.UUID) *DogUpdateOne {
	duo.mutation.SetDogImgID(u)
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DogUpdateOne) SetUpdatedAt(t time.Time) *DogUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DogUpdateOne) SetNillableUpdatedAt(t *time.Time) *DogUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DogUpdateOne) SetCreatedAt(t time.Time) *DogUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DogUpdateOne) SetNillableCreatedAt(t *time.Time) *DogUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (duo *DogUpdateOne) SetImageID(id uuid.UUID) *DogUpdateOne {
	duo.mutation.SetImageID(id)
	return duo
}

// SetImage sets the "image" edge to the Image entity.
func (duo *DogUpdateOne) SetImage(i *Image) *DogUpdateOne {
	return duo.SetImageID(i.ID)
}

// AddOwnerProfileIDs adds the "ownerProfiles" edge to the DogProfileOwner entity by IDs.
func (duo *DogUpdateOne) AddOwnerProfileIDs(ids ...uuid.UUID) *DogUpdateOne {
	duo.mutation.AddOwnerProfileIDs(ids...)
	return duo
}

// AddOwnerProfiles adds the "ownerProfiles" edges to the DogProfileOwner entity.
func (duo *DogUpdateOne) AddOwnerProfiles(d ...*DogProfileOwner) *DogUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddOwnerProfileIDs(ids...)
}

// AddBreedProfileIDs adds the "breedProfiles" edge to the DogProfileBreed entity by IDs.
func (duo *DogUpdateOne) AddBreedProfileIDs(ids ...uuid.UUID) *DogUpdateOne {
	duo.mutation.AddBreedProfileIDs(ids...)
	return duo
}

// AddBreedProfiles adds the "breedProfiles" edges to the DogProfileBreed entity.
func (duo *DogUpdateOne) AddBreedProfiles(d ...*DogProfileBreed) *DogUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddBreedProfileIDs(ids...)
}

// Mutation returns the DogMutation object of the builder.
func (duo *DogUpdateOne) Mutation() *DogMutation {
	return duo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (duo *DogUpdateOne) ClearImage() *DogUpdateOne {
	duo.mutation.ClearImage()
	return duo
}

// ClearOwnerProfiles clears all "ownerProfiles" edges to the DogProfileOwner entity.
func (duo *DogUpdateOne) ClearOwnerProfiles() *DogUpdateOne {
	duo.mutation.ClearOwnerProfiles()
	return duo
}

// RemoveOwnerProfileIDs removes the "ownerProfiles" edge to DogProfileOwner entities by IDs.
func (duo *DogUpdateOne) RemoveOwnerProfileIDs(ids ...uuid.UUID) *DogUpdateOne {
	duo.mutation.RemoveOwnerProfileIDs(ids...)
	return duo
}

// RemoveOwnerProfiles removes "ownerProfiles" edges to DogProfileOwner entities.
func (duo *DogUpdateOne) RemoveOwnerProfiles(d ...*DogProfileOwner) *DogUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveOwnerProfileIDs(ids...)
}

// ClearBreedProfiles clears all "breedProfiles" edges to the DogProfileBreed entity.
func (duo *DogUpdateOne) ClearBreedProfiles() *DogUpdateOne {
	duo.mutation.ClearBreedProfiles()
	return duo
}

// RemoveBreedProfileIDs removes the "breedProfiles" edge to DogProfileBreed entities by IDs.
func (duo *DogUpdateOne) RemoveBreedProfileIDs(ids ...uuid.UUID) *DogUpdateOne {
	duo.mutation.RemoveBreedProfileIDs(ids...)
	return duo
}

// RemoveBreedProfiles removes "breedProfiles" edges to DogProfileBreed entities.
func (duo *DogUpdateOne) RemoveBreedProfiles(d ...*DogProfileBreed) *DogUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveBreedProfileIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DogUpdateOne) Select(field string, fields ...string) *DogUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dog entity.
func (duo *DogUpdateOne) Save(ctx context.Context) (*Dog, error) {
	var (
		err  error
		node *Dog
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Dog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DogUpdateOne) SaveX(ctx context.Context) *Dog {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DogUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DogUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DogUpdateOne) check() error {
	if v, ok := duo.mutation.Age(); ok {
		if err := dog.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "Dog.age": %w`, err)}
		}
	}
	if v, ok := duo.mutation.WeightLbs(); ok {
		if err := dog.WeightLbsValidator(v); err != nil {
			return &ValidationError{Name: "weight_lbs", err: fmt.Errorf(`ent: validator failed for field "Dog.weight_lbs": %w`, err)}
		}
	}
	if v, ok := duo.mutation.WeightKgs(); ok {
		if err := dog.WeightKgsValidator(v); err != nil {
			return &ValidationError{Name: "weight_kgs", err: fmt.Errorf(`ent: validator failed for field "Dog.weight_kgs": %w`, err)}
		}
	}
	if _, ok := duo.mutation.ImageID(); duo.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Dog.image"`)
	}
	return nil
}

func (duo *DogUpdateOne) sqlSave(ctx context.Context) (_node *Dog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dog.Table,
			Columns: dog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dog.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dog.FieldID)
		for _, f := range fields {
			if !dog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.FullName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dog.FieldFullName,
		})
	}
	if value, ok := duo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dog.FieldAge,
		})
	}
	if value, ok := duo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dog.FieldAge,
		})
	}
	if value, ok := duo.mutation.WeightLbs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightLbs,
		})
	}
	if value, ok := duo.mutation.AddedWeightLbs(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightLbs,
		})
	}
	if value, ok := duo.mutation.WeightKgs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightKgs,
		})
	}
	if value, ok := duo.mutation.AddedWeightKgs(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightKgs,
		})
	}
	if value, ok := duo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dog.FieldSize,
		})
	}
	if value, ok := duo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldBirthday,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldUpdatedAt,
		})
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldCreatedAt,
		})
	}
	if duo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dog.ImageTable,
			Columns: []string{dog.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dog.ImageTable,
			Columns: []string{dog.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.OwnerProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedOwnerProfilesIDs(); len(nodes) > 0 && !duo.mutation.OwnerProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OwnerProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.BreedProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.BreedProfilesTable,
			Columns: []string{dog.BreedProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofilebreed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedBreedProfilesIDs(); len(nodes) > 0 && !duo.mutation.BreedProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.BreedProfilesTable,
			Columns: []string{dog.BreedProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofilebreed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.BreedProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.BreedProfilesTable,
			Columns: []string{dog.BreedProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofilebreed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dog{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
