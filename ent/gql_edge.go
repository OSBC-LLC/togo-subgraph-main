// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (b *Breed) DogProfiles(ctx context.Context) ([]*DogProfileBreed, error) {
	result, err := b.Edges.DogProfilesOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryDogProfiles().All(ctx)
	}
	return result, err
}

func (d *Dog) Image(ctx context.Context) (*Image, error) {
	result, err := d.Edges.ImageOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryImage().Only(ctx)
	}
	return result, err
}

func (d *Dog) OwnerProfiles(ctx context.Context) ([]*DogProfileOwner, error) {
	result, err := d.Edges.OwnerProfilesOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryOwnerProfiles().All(ctx)
	}
	return result, err
}

func (d *Dog) BreedProfiles(ctx context.Context) ([]*DogProfileBreed, error) {
	result, err := d.Edges.BreedProfilesOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryBreedProfiles().All(ctx)
	}
	return result, err
}

func (dpb *DogProfileBreed) Dog(ctx context.Context) (*Dog, error) {
	result, err := dpb.Edges.DogOrErr()
	if IsNotLoaded(err) {
		result, err = dpb.QueryDog().Only(ctx)
	}
	return result, err
}

func (dpb *DogProfileBreed) Breed(ctx context.Context) (*Breed, error) {
	result, err := dpb.Edges.BreedOrErr()
	if IsNotLoaded(err) {
		result, err = dpb.QueryBreed().Only(ctx)
	}
	return result, err
}

func (dpo *DogProfileOwner) Owner(ctx context.Context) (*User, error) {
	result, err := dpo.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = dpo.QueryOwner().Only(ctx)
	}
	return result, err
}

func (dpo *DogProfileOwner) Dog(ctx context.Context) (*Dog, error) {
	result, err := dpo.Edges.DogOrErr()
	if IsNotLoaded(err) {
		result, err = dpo.QueryDog().Only(ctx)
	}
	return result, err
}

func (i *Image) Users(ctx context.Context) ([]*User, error) {
	result, err := i.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryUsers().All(ctx)
	}
	return result, err
}

func (i *Image) Dogs(ctx context.Context) ([]*Dog, error) {
	result, err := i.Edges.DogsOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryDogs().All(ctx)
	}
	return result, err
}

func (pr *Profile) Users(ctx context.Context) ([]*User, error) {
	result, err := pr.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryUsers().All(ctx)
	}
	return result, err
}

func (u *User) Profile(ctx context.Context) (*Profile, error) {
	result, err := u.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryProfile().Only(ctx)
	}
	return result, err
}

func (u *User) Image(ctx context.Context) (*Image, error) {
	result, err := u.Edges.ImageOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryImage().Only(ctx)
	}
	return result, err
}

func (u *User) DogProfiles(ctx context.Context) ([]*DogProfileOwner, error) {
	result, err := u.Edges.DogProfilesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryDogProfiles().All(ctx)
	}
	return result, err
}
