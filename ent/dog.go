// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/image"
	"github.com/google/uuid"
)

// Dog is the model entity for the Dog schema.
type Dog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// WeightLbs holds the value of the "weight_lbs" field.
	WeightLbs float64 `json:"weight_lbs,omitempty"`
	// WeightKgs holds the value of the "weight_kgs" field.
	WeightKgs float64 `json:"weight_kgs,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// DogImgID holds the value of the "dog_img_id" field.
	DogImgID uuid.UUID `json:"dog_img_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DogQuery when eager-loading is set.
	Edges DogEdges `json:"edges"`
}

// DogEdges holds the relations/edges for other nodes in the graph.
type DogEdges struct {
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// OwnerProfiles holds the value of the ownerProfiles edge.
	OwnerProfiles []*DogProfileOwner `json:"ownerProfiles,omitempty"`
	// BreedProfiles holds the value of the breedProfiles edge.
	BreedProfiles []*DogProfileBreed `json:"breedProfiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]*int
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DogEdges) ImageOrErr() (*Image, error) {
	if e.loadedTypes[0] {
		if e.Image == nil {
			// The edge image was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// OwnerProfilesOrErr returns the OwnerProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e DogEdges) OwnerProfilesOrErr() ([]*DogProfileOwner, error) {
	if e.loadedTypes[1] {
		return e.OwnerProfiles, nil
	}
	return nil, &NotLoadedError{edge: "ownerProfiles"}
}

// BreedProfilesOrErr returns the BreedProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e DogEdges) BreedProfilesOrErr() ([]*DogProfileBreed, error) {
	if e.loadedTypes[2] {
		return e.BreedProfiles, nil
	}
	return nil, &NotLoadedError{edge: "breedProfiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dog.FieldWeightLbs, dog.FieldWeightKgs:
			values[i] = new(sql.NullFloat64)
		case dog.FieldAge:
			values[i] = new(sql.NullInt64)
		case dog.FieldFullName, dog.FieldSize:
			values[i] = new(sql.NullString)
		case dog.FieldBirthday, dog.FieldUpdatedAt, dog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case dog.FieldID, dog.FieldDogImgID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dog fields.
func (d *Dog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case dog.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				d.FullName = value.String
			}
		case dog.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				d.Age = int(value.Int64)
			}
		case dog.FieldWeightLbs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_lbs", values[i])
			} else if value.Valid {
				d.WeightLbs = value.Float64
			}
		case dog.FieldWeightKgs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_kgs", values[i])
			} else if value.Valid {
				d.WeightKgs = value.Float64
			}
		case dog.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				d.Size = value.String
			}
		case dog.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				d.Birthday = value.Time
			}
		case dog.FieldDogImgID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field dog_img_id", values[i])
			} else if value != nil {
				d.DogImgID = *value
			}
		case dog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case dog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryImage queries the "image" edge of the Dog entity.
func (d *Dog) QueryImage() *ImageQuery {
	return (&DogClient{config: d.config}).QueryImage(d)
}

// QueryOwnerProfiles queries the "ownerProfiles" edge of the Dog entity.
func (d *Dog) QueryOwnerProfiles() *DogProfileOwnerQuery {
	return (&DogClient{config: d.config}).QueryOwnerProfiles(d)
}

// QueryBreedProfiles queries the "breedProfiles" edge of the Dog entity.
func (d *Dog) QueryBreedProfiles() *DogProfileBreedQuery {
	return (&DogClient{config: d.config}).QueryBreedProfiles(d)
}

// Update returns a builder for updating this Dog.
// Note that you need to call Dog.Unwrap() before calling this method if this Dog
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dog) Update() *DogUpdateOne {
	return (&DogClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dog) Unwrap() *Dog {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dog is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dog) String() string {
	var builder strings.Builder
	builder.WriteString("Dog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("full_name=")
	builder.WriteString(d.FullName)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", d.Age))
	builder.WriteString(", ")
	builder.WriteString("weight_lbs=")
	builder.WriteString(fmt.Sprintf("%v", d.WeightLbs))
	builder.WriteString(", ")
	builder.WriteString("weight_kgs=")
	builder.WriteString(fmt.Sprintf("%v", d.WeightKgs))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(d.Size)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(d.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dog_img_id=")
	builder.WriteString(fmt.Sprintf("%v", d.DogImgID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Dogs is a parsable slice of Dog.
type Dogs []*Dog

func (d Dogs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
