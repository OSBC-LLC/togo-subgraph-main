// Code generated by ent, DO NOT EDIT.

package dogprofilebreed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// BreedID applies equality check predicate on the "breed_id" field. It's identical to BreedIDEQ.
func BreedID(v uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedID), v))
	})
}

// DogID applies equality check predicate on the "dog_id" field. It's identical to DogIDEQ.
func DogID(v uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDogID), v))
	})
}

// Percentage applies equality check predicate on the "percentage" field. It's identical to PercentageEQ.
func Percentage(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPercentage), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// BreedIDEQ applies the EQ predicate on the "breed_id" field.
func BreedIDEQ(v uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreedID), v))
	})
}

// BreedIDNEQ applies the NEQ predicate on the "breed_id" field.
func BreedIDNEQ(v uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreedID), v))
	})
}

// BreedIDIn applies the In predicate on the "breed_id" field.
func BreedIDIn(vs ...uuid.UUID) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreedID), v...))
	})
}

// BreedIDNotIn applies the NotIn predicate on the "breed_id" field.
func BreedIDNotIn(vs ...uuid.UUID) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreedID), v...))
	})
}

// DogIDEQ applies the EQ predicate on the "dog_id" field.
func DogIDEQ(v uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDogID), v))
	})
}

// DogIDNEQ applies the NEQ predicate on the "dog_id" field.
func DogIDNEQ(v uuid.UUID) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDogID), v))
	})
}

// DogIDIn applies the In predicate on the "dog_id" field.
func DogIDIn(vs ...uuid.UUID) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDogID), v...))
	})
}

// DogIDNotIn applies the NotIn predicate on the "dog_id" field.
func DogIDNotIn(vs ...uuid.UUID) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDogID), v...))
	})
}

// PercentageEQ applies the EQ predicate on the "percentage" field.
func PercentageEQ(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPercentage), v))
	})
}

// PercentageNEQ applies the NEQ predicate on the "percentage" field.
func PercentageNEQ(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPercentage), v))
	})
}

// PercentageIn applies the In predicate on the "percentage" field.
func PercentageIn(vs ...float64) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPercentage), v...))
	})
}

// PercentageNotIn applies the NotIn predicate on the "percentage" field.
func PercentageNotIn(vs ...float64) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPercentage), v...))
	})
}

// PercentageGT applies the GT predicate on the "percentage" field.
func PercentageGT(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPercentage), v))
	})
}

// PercentageGTE applies the GTE predicate on the "percentage" field.
func PercentageGTE(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPercentage), v))
	})
}

// PercentageLT applies the LT predicate on the "percentage" field.
func PercentageLT(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPercentage), v))
	})
}

// PercentageLTE applies the LTE predicate on the "percentage" field.
func PercentageLTE(v float64) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPercentage), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DogProfileBreed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasDog applies the HasEdge predicate on the "dog" edge.
func HasDog() predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DogTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DogTable, DogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDogWith applies the HasEdge predicate on the "dog" edge with a given conditions (other predicates).
func HasDogWith(preds ...predicate.Dog) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DogInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DogTable, DogColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBreed applies the HasEdge predicate on the "breed" edge.
func HasBreed() predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BreedTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BreedTable, BreedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBreedWith applies the HasEdge predicate on the "breed" edge with a given conditions (other predicates).
func HasBreedWith(preds ...predicate.Breed) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BreedInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BreedTable, BreedColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DogProfileBreed) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DogProfileBreed) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DogProfileBreed) predicate.DogProfileBreed {
	return predicate.DogProfileBreed(func(s *sql.Selector) {
		p(s.Not())
	})
}
