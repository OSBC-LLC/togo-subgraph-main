// Code generated by ent, DO NOT EDIT.

package dogprofilebreed

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dogprofilebreed type in the database.
	Label = "dog_profile_breed"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBreedID holds the string denoting the breed_id field in the database.
	FieldBreedID = "breed_id"
	// FieldDogID holds the string denoting the dog_id field in the database.
	FieldDogID = "dog_id"
	// FieldPercentage holds the string denoting the percentage field in the database.
	FieldPercentage = "percentage"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDog holds the string denoting the dog edge name in mutations.
	EdgeDog = "dog"
	// EdgeBreed holds the string denoting the breed edge name in mutations.
	EdgeBreed = "breed"
	// Table holds the table name of the dogprofilebreed in the database.
	Table = "dog_profile_breeds"
	// DogTable is the table that holds the dog relation/edge.
	DogTable = "dog_profile_breeds"
	// DogInverseTable is the table name for the Dog entity.
	// It exists in this package in order to avoid circular dependency with the "dog" package.
	DogInverseTable = "dogs"
	// DogColumn is the table column denoting the dog relation/edge.
	DogColumn = "dog_id"
	// BreedTable is the table that holds the breed relation/edge.
	BreedTable = "dog_profile_breeds"
	// BreedInverseTable is the table name for the Breed entity.
	// It exists in this package in order to avoid circular dependency with the "breed" package.
	BreedInverseTable = "breeds"
	// BreedColumn is the table column denoting the breed relation/edge.
	BreedColumn = "breed_id"
)

// Columns holds all SQL columns for dogprofilebreed fields.
var Columns = []string{
	FieldID,
	FieldBreedID,
	FieldDogID,
	FieldPercentage,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PercentageValidator is a validator for the "percentage" field. It is called by the builders before save.
	PercentageValidator func(float64) error
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
