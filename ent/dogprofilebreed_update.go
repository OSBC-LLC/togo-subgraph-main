// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/breed"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofilebreed"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/predicate"
	"github.com/google/uuid"
)

// DogProfileBreedUpdate is the builder for updating DogProfileBreed entities.
type DogProfileBreedUpdate struct {
	config
	hooks    []Hook
	mutation *DogProfileBreedMutation
}

// Where appends a list predicates to the DogProfileBreedUpdate builder.
func (dpbu *DogProfileBreedUpdate) Where(ps ...predicate.DogProfileBreed) *DogProfileBreedUpdate {
	dpbu.mutation.Where(ps...)
	return dpbu
}

// SetBreedID sets the "breed_id" field.
func (dpbu *DogProfileBreedUpdate) SetBreedID(u uuid.UUID) *DogProfileBreedUpdate {
	dpbu.mutation.SetBreedID(u)
	return dpbu
}

// SetDogID sets the "dog_id" field.
func (dpbu *DogProfileBreedUpdate) SetDogID(u uuid.UUID) *DogProfileBreedUpdate {
	dpbu.mutation.SetDogID(u)
	return dpbu
}

// SetPercentage sets the "percentage" field.
func (dpbu *DogProfileBreedUpdate) SetPercentage(f float64) *DogProfileBreedUpdate {
	dpbu.mutation.ResetPercentage()
	dpbu.mutation.SetPercentage(f)
	return dpbu
}

// AddPercentage adds f to the "percentage" field.
func (dpbu *DogProfileBreedUpdate) AddPercentage(f float64) *DogProfileBreedUpdate {
	dpbu.mutation.AddPercentage(f)
	return dpbu
}

// SetUpdatedAt sets the "updated_at" field.
func (dpbu *DogProfileBreedUpdate) SetUpdatedAt(t time.Time) *DogProfileBreedUpdate {
	dpbu.mutation.SetUpdatedAt(t)
	return dpbu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpbu *DogProfileBreedUpdate) SetNillableUpdatedAt(t *time.Time) *DogProfileBreedUpdate {
	if t != nil {
		dpbu.SetUpdatedAt(*t)
	}
	return dpbu
}

// SetCreatedAt sets the "created_at" field.
func (dpbu *DogProfileBreedUpdate) SetCreatedAt(t time.Time) *DogProfileBreedUpdate {
	dpbu.mutation.SetCreatedAt(t)
	return dpbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpbu *DogProfileBreedUpdate) SetNillableCreatedAt(t *time.Time) *DogProfileBreedUpdate {
	if t != nil {
		dpbu.SetCreatedAt(*t)
	}
	return dpbu
}

// SetDog sets the "dog" edge to the Dog entity.
func (dpbu *DogProfileBreedUpdate) SetDog(d *Dog) *DogProfileBreedUpdate {
	return dpbu.SetDogID(d.ID)
}

// SetBreed sets the "breed" edge to the Breed entity.
func (dpbu *DogProfileBreedUpdate) SetBreed(b *Breed) *DogProfileBreedUpdate {
	return dpbu.SetBreedID(b.ID)
}

// Mutation returns the DogProfileBreedMutation object of the builder.
func (dpbu *DogProfileBreedUpdate) Mutation() *DogProfileBreedMutation {
	return dpbu.mutation
}

// ClearDog clears the "dog" edge to the Dog entity.
func (dpbu *DogProfileBreedUpdate) ClearDog() *DogProfileBreedUpdate {
	dpbu.mutation.ClearDog()
	return dpbu
}

// ClearBreed clears the "breed" edge to the Breed entity.
func (dpbu *DogProfileBreedUpdate) ClearBreed() *DogProfileBreedUpdate {
	dpbu.mutation.ClearBreed()
	return dpbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpbu *DogProfileBreedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dpbu.hooks) == 0 {
		if err = dpbu.check(); err != nil {
			return 0, err
		}
		affected, err = dpbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogProfileBreedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpbu.check(); err != nil {
				return 0, err
			}
			dpbu.mutation = mutation
			affected, err = dpbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpbu.hooks) - 1; i >= 0; i-- {
			if dpbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpbu *DogProfileBreedUpdate) SaveX(ctx context.Context) int {
	affected, err := dpbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpbu *DogProfileBreedUpdate) Exec(ctx context.Context) error {
	_, err := dpbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpbu *DogProfileBreedUpdate) ExecX(ctx context.Context) {
	if err := dpbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpbu *DogProfileBreedUpdate) check() error {
	if v, ok := dpbu.mutation.Percentage(); ok {
		if err := dogprofilebreed.PercentageValidator(v); err != nil {
			return &ValidationError{Name: "percentage", err: fmt.Errorf(`ent: validator failed for field "DogProfileBreed.percentage": %w`, err)}
		}
	}
	if _, ok := dpbu.mutation.DogID(); dpbu.mutation.DogCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DogProfileBreed.dog"`)
	}
	if _, ok := dpbu.mutation.BreedID(); dpbu.mutation.BreedCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DogProfileBreed.breed"`)
	}
	return nil
}

func (dpbu *DogProfileBreedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dogprofilebreed.Table,
			Columns: dogprofilebreed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dogprofilebreed.FieldID,
			},
		},
	}
	if ps := dpbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpbu.mutation.Percentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dogprofilebreed.FieldPercentage,
		})
	}
	if value, ok := dpbu.mutation.AddedPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dogprofilebreed.FieldPercentage,
		})
	}
	if value, ok := dpbu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofilebreed.FieldUpdatedAt,
		})
	}
	if value, ok := dpbu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofilebreed.FieldCreatedAt,
		})
	}
	if dpbu.mutation.DogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.DogTable,
			Columns: []string{dogprofilebreed.DogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpbu.mutation.DogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.DogTable,
			Columns: []string{dogprofilebreed.DogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpbu.mutation.BreedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.BreedTable,
			Columns: []string{dogprofilebreed.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: breed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpbu.mutation.BreedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.BreedTable,
			Columns: []string{dogprofilebreed.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: breed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dogprofilebreed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DogProfileBreedUpdateOne is the builder for updating a single DogProfileBreed entity.
type DogProfileBreedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DogProfileBreedMutation
}

// SetBreedID sets the "breed_id" field.
func (dpbuo *DogProfileBreedUpdateOne) SetBreedID(u uuid.UUID) *DogProfileBreedUpdateOne {
	dpbuo.mutation.SetBreedID(u)
	return dpbuo
}

// SetDogID sets the "dog_id" field.
func (dpbuo *DogProfileBreedUpdateOne) SetDogID(u uuid.UUID) *DogProfileBreedUpdateOne {
	dpbuo.mutation.SetDogID(u)
	return dpbuo
}

// SetPercentage sets the "percentage" field.
func (dpbuo *DogProfileBreedUpdateOne) SetPercentage(f float64) *DogProfileBreedUpdateOne {
	dpbuo.mutation.ResetPercentage()
	dpbuo.mutation.SetPercentage(f)
	return dpbuo
}

// AddPercentage adds f to the "percentage" field.
func (dpbuo *DogProfileBreedUpdateOne) AddPercentage(f float64) *DogProfileBreedUpdateOne {
	dpbuo.mutation.AddPercentage(f)
	return dpbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dpbuo *DogProfileBreedUpdateOne) SetUpdatedAt(t time.Time) *DogProfileBreedUpdateOne {
	dpbuo.mutation.SetUpdatedAt(t)
	return dpbuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpbuo *DogProfileBreedUpdateOne) SetNillableUpdatedAt(t *time.Time) *DogProfileBreedUpdateOne {
	if t != nil {
		dpbuo.SetUpdatedAt(*t)
	}
	return dpbuo
}

// SetCreatedAt sets the "created_at" field.
func (dpbuo *DogProfileBreedUpdateOne) SetCreatedAt(t time.Time) *DogProfileBreedUpdateOne {
	dpbuo.mutation.SetCreatedAt(t)
	return dpbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpbuo *DogProfileBreedUpdateOne) SetNillableCreatedAt(t *time.Time) *DogProfileBreedUpdateOne {
	if t != nil {
		dpbuo.SetCreatedAt(*t)
	}
	return dpbuo
}

// SetDog sets the "dog" edge to the Dog entity.
func (dpbuo *DogProfileBreedUpdateOne) SetDog(d *Dog) *DogProfileBreedUpdateOne {
	return dpbuo.SetDogID(d.ID)
}

// SetBreed sets the "breed" edge to the Breed entity.
func (dpbuo *DogProfileBreedUpdateOne) SetBreed(b *Breed) *DogProfileBreedUpdateOne {
	return dpbuo.SetBreedID(b.ID)
}

// Mutation returns the DogProfileBreedMutation object of the builder.
func (dpbuo *DogProfileBreedUpdateOne) Mutation() *DogProfileBreedMutation {
	return dpbuo.mutation
}

// ClearDog clears the "dog" edge to the Dog entity.
func (dpbuo *DogProfileBreedUpdateOne) ClearDog() *DogProfileBreedUpdateOne {
	dpbuo.mutation.ClearDog()
	return dpbuo
}

// ClearBreed clears the "breed" edge to the Breed entity.
func (dpbuo *DogProfileBreedUpdateOne) ClearBreed() *DogProfileBreedUpdateOne {
	dpbuo.mutation.ClearBreed()
	return dpbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpbuo *DogProfileBreedUpdateOne) Select(field string, fields ...string) *DogProfileBreedUpdateOne {
	dpbuo.fields = append([]string{field}, fields...)
	return dpbuo
}

// Save executes the query and returns the updated DogProfileBreed entity.
func (dpbuo *DogProfileBreedUpdateOne) Save(ctx context.Context) (*DogProfileBreed, error) {
	var (
		err  error
		node *DogProfileBreed
	)
	if len(dpbuo.hooks) == 0 {
		if err = dpbuo.check(); err != nil {
			return nil, err
		}
		node, err = dpbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogProfileBreedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpbuo.check(); err != nil {
				return nil, err
			}
			dpbuo.mutation = mutation
			node, err = dpbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpbuo.hooks) - 1; i >= 0; i-- {
			if dpbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpbuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpbuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DogProfileBreed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DogProfileBreedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpbuo *DogProfileBreedUpdateOne) SaveX(ctx context.Context) *DogProfileBreed {
	node, err := dpbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpbuo *DogProfileBreedUpdateOne) Exec(ctx context.Context) error {
	_, err := dpbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpbuo *DogProfileBreedUpdateOne) ExecX(ctx context.Context) {
	if err := dpbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpbuo *DogProfileBreedUpdateOne) check() error {
	if v, ok := dpbuo.mutation.Percentage(); ok {
		if err := dogprofilebreed.PercentageValidator(v); err != nil {
			return &ValidationError{Name: "percentage", err: fmt.Errorf(`ent: validator failed for field "DogProfileBreed.percentage": %w`, err)}
		}
	}
	if _, ok := dpbuo.mutation.DogID(); dpbuo.mutation.DogCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DogProfileBreed.dog"`)
	}
	if _, ok := dpbuo.mutation.BreedID(); dpbuo.mutation.BreedCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DogProfileBreed.breed"`)
	}
	return nil
}

func (dpbuo *DogProfileBreedUpdateOne) sqlSave(ctx context.Context) (_node *DogProfileBreed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dogprofilebreed.Table,
			Columns: dogprofilebreed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dogprofilebreed.FieldID,
			},
		},
	}
	id, ok := dpbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DogProfileBreed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dogprofilebreed.FieldID)
		for _, f := range fields {
			if !dogprofilebreed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dogprofilebreed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpbuo.mutation.Percentage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dogprofilebreed.FieldPercentage,
		})
	}
	if value, ok := dpbuo.mutation.AddedPercentage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dogprofilebreed.FieldPercentage,
		})
	}
	if value, ok := dpbuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofilebreed.FieldUpdatedAt,
		})
	}
	if value, ok := dpbuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofilebreed.FieldCreatedAt,
		})
	}
	if dpbuo.mutation.DogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.DogTable,
			Columns: []string{dogprofilebreed.DogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpbuo.mutation.DogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.DogTable,
			Columns: []string{dogprofilebreed.DogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpbuo.mutation.BreedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.BreedTable,
			Columns: []string{dogprofilebreed.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: breed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpbuo.mutation.BreedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.BreedTable,
			Columns: []string{dogprofilebreed.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: breed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DogProfileBreed{config: dpbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dogprofilebreed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
