// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/breed"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofilebreed"
	"github.com/google/uuid"
)

// DogProfileBreed is the model entity for the DogProfileBreed schema.
type DogProfileBreed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BreedID holds the value of the "breed_id" field.
	BreedID uuid.UUID `json:"breed_id,omitempty"`
	// DogID holds the value of the "dog_id" field.
	DogID uuid.UUID `json:"dog_id,omitempty"`
	// Percentage holds the value of the "percentage" field.
	Percentage float64 `json:"percentage,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DogProfileBreedQuery when eager-loading is set.
	Edges DogProfileBreedEdges `json:"edges"`
}

// DogProfileBreedEdges holds the relations/edges for other nodes in the graph.
type DogProfileBreedEdges struct {
	// Dog holds the value of the dog edge.
	Dog *Dog `json:"dog,omitempty"`
	// Breed holds the value of the breed edge.
	Breed *Breed `json:"breed,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]*int
}

// DogOrErr returns the Dog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DogProfileBreedEdges) DogOrErr() (*Dog, error) {
	if e.loadedTypes[0] {
		if e.Dog == nil {
			// The edge dog was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dog.Label}
		}
		return e.Dog, nil
	}
	return nil, &NotLoadedError{edge: "dog"}
}

// BreedOrErr returns the Breed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DogProfileBreedEdges) BreedOrErr() (*Breed, error) {
	if e.loadedTypes[1] {
		if e.Breed == nil {
			// The edge breed was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: breed.Label}
		}
		return e.Breed, nil
	}
	return nil, &NotLoadedError{edge: "breed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DogProfileBreed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dogprofilebreed.FieldPercentage:
			values[i] = new(sql.NullFloat64)
		case dogprofilebreed.FieldUpdatedAt, dogprofilebreed.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case dogprofilebreed.FieldID, dogprofilebreed.FieldBreedID, dogprofilebreed.FieldDogID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DogProfileBreed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DogProfileBreed fields.
func (dpb *DogProfileBreed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dogprofilebreed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dpb.ID = *value
			}
		case dogprofilebreed.FieldBreedID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field breed_id", values[i])
			} else if value != nil {
				dpb.BreedID = *value
			}
		case dogprofilebreed.FieldDogID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field dog_id", values[i])
			} else if value != nil {
				dpb.DogID = *value
			}
		case dogprofilebreed.FieldPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field percentage", values[i])
			} else if value.Valid {
				dpb.Percentage = value.Float64
			}
		case dogprofilebreed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dpb.UpdatedAt = value.Time
			}
		case dogprofilebreed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dpb.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryDog queries the "dog" edge of the DogProfileBreed entity.
func (dpb *DogProfileBreed) QueryDog() *DogQuery {
	return (&DogProfileBreedClient{config: dpb.config}).QueryDog(dpb)
}

// QueryBreed queries the "breed" edge of the DogProfileBreed entity.
func (dpb *DogProfileBreed) QueryBreed() *BreedQuery {
	return (&DogProfileBreedClient{config: dpb.config}).QueryBreed(dpb)
}

// Update returns a builder for updating this DogProfileBreed.
// Note that you need to call DogProfileBreed.Unwrap() before calling this method if this DogProfileBreed
// was returned from a transaction, and the transaction was committed or rolled back.
func (dpb *DogProfileBreed) Update() *DogProfileBreedUpdateOne {
	return (&DogProfileBreedClient{config: dpb.config}).UpdateOne(dpb)
}

// Unwrap unwraps the DogProfileBreed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dpb *DogProfileBreed) Unwrap() *DogProfileBreed {
	_tx, ok := dpb.config.driver.(*txDriver)
	if !ok {
		panic("ent: DogProfileBreed is not a transactional entity")
	}
	dpb.config.driver = _tx.drv
	return dpb
}

// String implements the fmt.Stringer.
func (dpb *DogProfileBreed) String() string {
	var builder strings.Builder
	builder.WriteString("DogProfileBreed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dpb.ID))
	builder.WriteString("breed_id=")
	builder.WriteString(fmt.Sprintf("%v", dpb.BreedID))
	builder.WriteString(", ")
	builder.WriteString("dog_id=")
	builder.WriteString(fmt.Sprintf("%v", dpb.DogID))
	builder.WriteString(", ")
	builder.WriteString("percentage=")
	builder.WriteString(fmt.Sprintf("%v", dpb.Percentage))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dpb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dpb.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DogProfileBreeds is a parsable slice of DogProfileBreed.
type DogProfileBreeds []*DogProfileBreed

func (dpb DogProfileBreeds) config(cfg config) {
	for _i := range dpb {
		dpb[_i].config = cfg
	}
}
