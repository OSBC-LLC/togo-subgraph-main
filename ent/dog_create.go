// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofileowner"
	"github.com/google/uuid"
)

// DogCreate is the builder for creating a Dog entity.
type DogCreate struct {
	config
	mutation *DogMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (dc *DogCreate) SetFullName(s string) *DogCreate {
	dc.mutation.SetFullName(s)
	return dc
}

// SetAge sets the "age" field.
func (dc *DogCreate) SetAge(i int) *DogCreate {
	dc.mutation.SetAge(i)
	return dc
}

// SetWeightLbs sets the "weight_lbs" field.
func (dc *DogCreate) SetWeightLbs(f float64) *DogCreate {
	dc.mutation.SetWeightLbs(f)
	return dc
}

// SetWeightKgs sets the "weight_kgs" field.
func (dc *DogCreate) SetWeightKgs(f float64) *DogCreate {
	dc.mutation.SetWeightKgs(f)
	return dc
}

// SetSize sets the "size" field.
func (dc *DogCreate) SetSize(s string) *DogCreate {
	dc.mutation.SetSize(s)
	return dc
}

// SetBirthday sets the "birthday" field.
func (dc *DogCreate) SetBirthday(t time.Time) *DogCreate {
	dc.mutation.SetBirthday(t)
	return dc
}

// SetDogImgID sets the "dog_img_id" field.
func (dc *DogCreate) SetDogImgID(u uuid.UUID) *DogCreate {
	dc.mutation.SetDogImgID(u)
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DogCreate) SetUpdatedAt(t time.Time) *DogCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DogCreate) SetNillableUpdatedAt(t *time.Time) *DogCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DogCreate) SetCreatedAt(t time.Time) *DogCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DogCreate) SetNillableCreatedAt(t *time.Time) *DogCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DogCreate) SetID(u uuid.UUID) *DogCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DogCreate) SetNillableID(u *uuid.UUID) *DogCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// AddOwnerProfileIDs adds the "ownerProfiles" edge to the DogProfileOwner entity by IDs.
func (dc *DogCreate) AddOwnerProfileIDs(ids ...uuid.UUID) *DogCreate {
	dc.mutation.AddOwnerProfileIDs(ids...)
	return dc
}

// AddOwnerProfiles adds the "ownerProfiles" edges to the DogProfileOwner entity.
func (dc *DogCreate) AddOwnerProfiles(d ...*DogProfileOwner) *DogCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dc.AddOwnerProfileIDs(ids...)
}

// Mutation returns the DogMutation object of the builder.
func (dc *DogCreate) Mutation() *DogMutation {
	return dc.mutation
}

// Save creates the Dog in the database.
func (dc *DogCreate) Save(ctx context.Context) (*Dog, error) {
	var (
		err  error
		node *Dog
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Dog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DogCreate) SaveX(ctx context.Context) *Dog {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DogCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DogCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DogCreate) defaults() {
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := dog.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := dog.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := dog.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DogCreate) check() error {
	if _, ok := dc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Dog.full_name"`)}
	}
	if _, ok := dc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Dog.age"`)}
	}
	if v, ok := dc.mutation.Age(); ok {
		if err := dog.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "Dog.age": %w`, err)}
		}
	}
	if _, ok := dc.mutation.WeightLbs(); !ok {
		return &ValidationError{Name: "weight_lbs", err: errors.New(`ent: missing required field "Dog.weight_lbs"`)}
	}
	if v, ok := dc.mutation.WeightLbs(); ok {
		if err := dog.WeightLbsValidator(v); err != nil {
			return &ValidationError{Name: "weight_lbs", err: fmt.Errorf(`ent: validator failed for field "Dog.weight_lbs": %w`, err)}
		}
	}
	if _, ok := dc.mutation.WeightKgs(); !ok {
		return &ValidationError{Name: "weight_kgs", err: errors.New(`ent: missing required field "Dog.weight_kgs"`)}
	}
	if v, ok := dc.mutation.WeightKgs(); ok {
		if err := dog.WeightKgsValidator(v); err != nil {
			return &ValidationError{Name: "weight_kgs", err: fmt.Errorf(`ent: validator failed for field "Dog.weight_kgs": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Dog.size"`)}
	}
	if _, ok := dc.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`ent: missing required field "Dog.birthday"`)}
	}
	if _, ok := dc.mutation.DogImgID(); !ok {
		return &ValidationError{Name: "dog_img_id", err: errors.New(`ent: missing required field "Dog.dog_img_id"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Dog.updated_at"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Dog.created_at"`)}
	}
	return nil
}

func (dc *DogCreate) sqlSave(ctx context.Context) (*Dog, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dc *DogCreate) createSpec() (*Dog, *sqlgraph.CreateSpec) {
	var (
		_node = &Dog{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dog.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.FullName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dog.FieldFullName,
		})
		_node.FullName = value
	}
	if value, ok := dc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dog.FieldAge,
		})
		_node.Age = value
	}
	if value, ok := dc.mutation.WeightLbs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightLbs,
		})
		_node.WeightLbs = value
	}
	if value, ok := dc.mutation.WeightKgs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dog.FieldWeightKgs,
		})
		_node.WeightKgs = value
	}
	if value, ok := dc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dog.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := dc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := dc.mutation.DogImgID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: dog.FieldDogImgID,
		})
		_node.DogImgID = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := dc.mutation.OwnerProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dog.OwnerProfilesTable,
			Columns: []string{dog.OwnerProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dogprofileowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DogCreateBulk is the builder for creating many Dog entities in bulk.
type DogCreateBulk struct {
	config
	builders []*DogCreate
}

// Save creates the Dog entities in the database.
func (dcb *DogCreateBulk) Save(ctx context.Context) ([]*Dog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dog, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DogCreateBulk) SaveX(ctx context.Context) []*Dog {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DogCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DogCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
