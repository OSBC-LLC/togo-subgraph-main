// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/breed"
	"github.com/google/uuid"
)

// Breed is the model entity for the Breed schema.
type Breed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BreedQuery when eager-loading is set.
	Edges BreedEdges `json:"edges"`
}

// BreedEdges holds the relations/edges for other nodes in the graph.
type BreedEdges struct {
	// DogProfiles holds the value of the dogProfiles edge.
	DogProfiles []*DogProfileBreed `json:"dogProfiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DogProfilesOrErr returns the DogProfiles value or an error if the edge
// was not loaded in eager-loading.
func (e BreedEdges) DogProfilesOrErr() ([]*DogProfileBreed, error) {
	if e.loadedTypes[0] {
		return e.DogProfiles, nil
	}
	return nil, &NotLoadedError{edge: "dogProfiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Breed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case breed.FieldName:
			values[i] = new(sql.NullString)
		case breed.FieldUpdatedAt, breed.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case breed.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Breed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Breed fields.
func (b *Breed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case breed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case breed.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case breed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case breed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryDogProfiles queries the "dogProfiles" edge of the Breed entity.
func (b *Breed) QueryDogProfiles() *DogProfileBreedQuery {
	return (&BreedClient{config: b.config}).QueryDogProfiles(b)
}

// Update returns a builder for updating this Breed.
// Note that you need to call Breed.Unwrap() before calling this method if this Breed
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Breed) Update() *BreedUpdateOne {
	return (&BreedClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Breed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Breed) Unwrap() *Breed {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Breed is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Breed) String() string {
	var builder strings.Builder
	builder.WriteString("Breed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Breeds is a parsable slice of Breed.
type Breeds []*Breed

func (b Breeds) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
