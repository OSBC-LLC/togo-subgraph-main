// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/breed"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dog"
	"github.com/OSBC-LLC/togo-subgraph-main/ent/dogprofilebreed"
	"github.com/google/uuid"
)

// DogProfileBreedCreate is the builder for creating a DogProfileBreed entity.
type DogProfileBreedCreate struct {
	config
	mutation *DogProfileBreedMutation
	hooks    []Hook
}

// SetBreedID sets the "breed_id" field.
func (dpbc *DogProfileBreedCreate) SetBreedID(u uuid.UUID) *DogProfileBreedCreate {
	dpbc.mutation.SetBreedID(u)
	return dpbc
}

// SetDogID sets the "dog_id" field.
func (dpbc *DogProfileBreedCreate) SetDogID(u uuid.UUID) *DogProfileBreedCreate {
	dpbc.mutation.SetDogID(u)
	return dpbc
}

// SetPercentage sets the "percentage" field.
func (dpbc *DogProfileBreedCreate) SetPercentage(f float64) *DogProfileBreedCreate {
	dpbc.mutation.SetPercentage(f)
	return dpbc
}

// SetUpdatedAt sets the "updated_at" field.
func (dpbc *DogProfileBreedCreate) SetUpdatedAt(t time.Time) *DogProfileBreedCreate {
	dpbc.mutation.SetUpdatedAt(t)
	return dpbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpbc *DogProfileBreedCreate) SetNillableUpdatedAt(t *time.Time) *DogProfileBreedCreate {
	if t != nil {
		dpbc.SetUpdatedAt(*t)
	}
	return dpbc
}

// SetCreatedAt sets the "created_at" field.
func (dpbc *DogProfileBreedCreate) SetCreatedAt(t time.Time) *DogProfileBreedCreate {
	dpbc.mutation.SetCreatedAt(t)
	return dpbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpbc *DogProfileBreedCreate) SetNillableCreatedAt(t *time.Time) *DogProfileBreedCreate {
	if t != nil {
		dpbc.SetCreatedAt(*t)
	}
	return dpbc
}

// SetID sets the "id" field.
func (dpbc *DogProfileBreedCreate) SetID(u uuid.UUID) *DogProfileBreedCreate {
	dpbc.mutation.SetID(u)
	return dpbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dpbc *DogProfileBreedCreate) SetNillableID(u *uuid.UUID) *DogProfileBreedCreate {
	if u != nil {
		dpbc.SetID(*u)
	}
	return dpbc
}

// SetDog sets the "dog" edge to the Dog entity.
func (dpbc *DogProfileBreedCreate) SetDog(d *Dog) *DogProfileBreedCreate {
	return dpbc.SetDogID(d.ID)
}

// SetBreed sets the "breed" edge to the Breed entity.
func (dpbc *DogProfileBreedCreate) SetBreed(b *Breed) *DogProfileBreedCreate {
	return dpbc.SetBreedID(b.ID)
}

// Mutation returns the DogProfileBreedMutation object of the builder.
func (dpbc *DogProfileBreedCreate) Mutation() *DogProfileBreedMutation {
	return dpbc.mutation
}

// Save creates the DogProfileBreed in the database.
func (dpbc *DogProfileBreedCreate) Save(ctx context.Context) (*DogProfileBreed, error) {
	var (
		err  error
		node *DogProfileBreed
	)
	dpbc.defaults()
	if len(dpbc.hooks) == 0 {
		if err = dpbc.check(); err != nil {
			return nil, err
		}
		node, err = dpbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DogProfileBreedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpbc.check(); err != nil {
				return nil, err
			}
			dpbc.mutation = mutation
			if node, err = dpbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dpbc.hooks) - 1; i >= 0; i-- {
			if dpbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DogProfileBreed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DogProfileBreedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dpbc *DogProfileBreedCreate) SaveX(ctx context.Context) *DogProfileBreed {
	v, err := dpbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpbc *DogProfileBreedCreate) Exec(ctx context.Context) error {
	_, err := dpbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpbc *DogProfileBreedCreate) ExecX(ctx context.Context) {
	if err := dpbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpbc *DogProfileBreedCreate) defaults() {
	if _, ok := dpbc.mutation.UpdatedAt(); !ok {
		v := dogprofilebreed.DefaultUpdatedAt()
		dpbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dpbc.mutation.CreatedAt(); !ok {
		v := dogprofilebreed.DefaultCreatedAt()
		dpbc.mutation.SetCreatedAt(v)
	}
	if _, ok := dpbc.mutation.ID(); !ok {
		v := dogprofilebreed.DefaultID()
		dpbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpbc *DogProfileBreedCreate) check() error {
	if _, ok := dpbc.mutation.BreedID(); !ok {
		return &ValidationError{Name: "breed_id", err: errors.New(`ent: missing required field "DogProfileBreed.breed_id"`)}
	}
	if _, ok := dpbc.mutation.DogID(); !ok {
		return &ValidationError{Name: "dog_id", err: errors.New(`ent: missing required field "DogProfileBreed.dog_id"`)}
	}
	if _, ok := dpbc.mutation.Percentage(); !ok {
		return &ValidationError{Name: "percentage", err: errors.New(`ent: missing required field "DogProfileBreed.percentage"`)}
	}
	if v, ok := dpbc.mutation.Percentage(); ok {
		if err := dogprofilebreed.PercentageValidator(v); err != nil {
			return &ValidationError{Name: "percentage", err: fmt.Errorf(`ent: validator failed for field "DogProfileBreed.percentage": %w`, err)}
		}
	}
	if _, ok := dpbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DogProfileBreed.updated_at"`)}
	}
	if _, ok := dpbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DogProfileBreed.created_at"`)}
	}
	if _, ok := dpbc.mutation.DogID(); !ok {
		return &ValidationError{Name: "dog", err: errors.New(`ent: missing required edge "DogProfileBreed.dog"`)}
	}
	if _, ok := dpbc.mutation.BreedID(); !ok {
		return &ValidationError{Name: "breed", err: errors.New(`ent: missing required edge "DogProfileBreed.breed"`)}
	}
	return nil
}

func (dpbc *DogProfileBreedCreate) sqlSave(ctx context.Context) (*DogProfileBreed, error) {
	_node, _spec := dpbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dpbc *DogProfileBreedCreate) createSpec() (*DogProfileBreed, *sqlgraph.CreateSpec) {
	var (
		_node = &DogProfileBreed{config: dpbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dogprofilebreed.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dogprofilebreed.FieldID,
			},
		}
	)
	if id, ok := dpbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dpbc.mutation.Percentage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: dogprofilebreed.FieldPercentage,
		})
		_node.Percentage = value
	}
	if value, ok := dpbc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofilebreed.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dpbc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dogprofilebreed.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := dpbc.mutation.DogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.DogTable,
			Columns: []string{dogprofilebreed.DogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DogID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpbc.mutation.BreedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dogprofilebreed.BreedTable,
			Columns: []string{dogprofilebreed.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: breed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BreedID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DogProfileBreedCreateBulk is the builder for creating many DogProfileBreed entities in bulk.
type DogProfileBreedCreateBulk struct {
	config
	builders []*DogProfileBreedCreate
}

// Save creates the DogProfileBreed entities in the database.
func (dpbcb *DogProfileBreedCreateBulk) Save(ctx context.Context) ([]*DogProfileBreed, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dpbcb.builders))
	nodes := make([]*DogProfileBreed, len(dpbcb.builders))
	mutators := make([]Mutator, len(dpbcb.builders))
	for i := range dpbcb.builders {
		func(i int, root context.Context) {
			builder := dpbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DogProfileBreedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpbcb *DogProfileBreedCreateBulk) SaveX(ctx context.Context) []*DogProfileBreed {
	v, err := dpbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpbcb *DogProfileBreedCreateBulk) Exec(ctx context.Context) error {
	_, err := dpbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpbcb *DogProfileBreedCreateBulk) ExecX(ctx context.Context) {
	if err := dpbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
