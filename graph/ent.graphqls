directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Breed implements Node {
  id: ID!
  name: String!
  updatedAt: Time!
  createdAt: Time!
}
"""
BreedWhereInput is used for filtering Breed objects.
Input was generated by ent.
"""
input BreedWhereInput {
  not: BreedWhereInput
  and: [BreedWhereInput!]
  or: [BreedWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Dog implements Node {
  id: ID!
  fullName: String!
  age: Int!
  weightLbs: Float!
  weightKgs: Float!
  size: String!
  birthday: Time!
  dogImgID: ID!
  updatedAt: Time!
  createdAt: Time!
  image: Image!
  breedprofiles: [DogProfileBreed!]
}
type DogProfileBreed implements Node {
  id: ID!
  breedID: ID!
  dogID: ID!
  percentage: Float!
  updatedAt: Time!
  createdAt: Time!
  breed: Breed!
}
"""
DogProfileBreedWhereInput is used for filtering DogProfileBreed objects.
Input was generated by ent.
"""
input DogProfileBreedWhereInput {
  not: DogProfileBreedWhereInput
  and: [DogProfileBreedWhereInput!]
  or: [DogProfileBreedWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """breed_id field predicates"""
  breedID: ID
  breedIDNEQ: ID
  breedIDIn: [ID!]
  breedIDNotIn: [ID!]
  """dog_id field predicates"""
  dogID: ID
  dogIDNEQ: ID
  dogIDIn: [ID!]
  dogIDNotIn: [ID!]
  """percentage field predicates"""
  percentage: Float
  percentageNEQ: Float
  percentageIn: [Float!]
  percentageNotIn: [Float!]
  percentageGT: Float
  percentageGTE: Float
  percentageLT: Float
  percentageLTE: Float
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """breed edge predicates"""
  hasBreed: Boolean
  hasBreedWith: [BreedWhereInput!]
}
type DogProfileOwner implements Node {
  id: ID!
  ownerID: ID!
  dogID: ID!
  updatedAt: Time!
  createdAt: Time!
  dog: Dog!
}
"""
DogProfileOwnerWhereInput is used for filtering DogProfileOwner objects.
Input was generated by ent.
"""
input DogProfileOwnerWhereInput {
  not: DogProfileOwnerWhereInput
  and: [DogProfileOwnerWhereInput!]
  or: [DogProfileOwnerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """owner_id field predicates"""
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  """dog_id field predicates"""
  dogID: ID
  dogIDNEQ: ID
  dogIDIn: [ID!]
  dogIDNotIn: [ID!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """dog edge predicates"""
  hasDog: Boolean
  hasDogWith: [DogWhereInput!]
}
"""
DogWhereInput is used for filtering Dog objects.
Input was generated by ent.
"""
input DogWhereInput {
  not: DogWhereInput
  and: [DogWhereInput!]
  or: [DogWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """age field predicates"""
  age: Int
  ageNEQ: Int
  ageIn: [Int!]
  ageNotIn: [Int!]
  ageGT: Int
  ageGTE: Int
  ageLT: Int
  ageLTE: Int
  """weight_lbs field predicates"""
  weightLbs: Float
  weightLbsNEQ: Float
  weightLbsIn: [Float!]
  weightLbsNotIn: [Float!]
  weightLbsGT: Float
  weightLbsGTE: Float
  weightLbsLT: Float
  weightLbsLTE: Float
  """weight_kgs field predicates"""
  weightKgs: Float
  weightKgsNEQ: Float
  weightKgsIn: [Float!]
  weightKgsNotIn: [Float!]
  weightKgsGT: Float
  weightKgsGTE: Float
  weightKgsLT: Float
  weightKgsLTE: Float
  """size field predicates"""
  size: String
  sizeNEQ: String
  sizeIn: [String!]
  sizeNotIn: [String!]
  sizeGT: String
  sizeGTE: String
  sizeLT: String
  sizeLTE: String
  sizeContains: String
  sizeHasPrefix: String
  sizeHasSuffix: String
  sizeEqualFold: String
  sizeContainsFold: String
  """birthday field predicates"""
  birthday: Time
  birthdayNEQ: Time
  birthdayIn: [Time!]
  birthdayNotIn: [Time!]
  birthdayGT: Time
  birthdayGTE: Time
  birthdayLT: Time
  birthdayLTE: Time
  """dog_img_id field predicates"""
  dogImgID: ID
  dogImgIDNEQ: ID
  dogImgIDIn: [ID!]
  dogImgIDNotIn: [ID!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """image edge predicates"""
  hasImage: Boolean
  hasImageWith: [ImageWhereInput!]
  """breedProfiles edge predicates"""
  hasBreedProfiles: Boolean
  hasBreedProfilesWith: [DogProfileBreedWhereInput!]
}
type Image implements Node {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  type: String!
  updatedAt: Time!
  createdAt: Time!
  users: [User!]
  dogs: [Dog!]
}
"""
ImageWhereInput is used for filtering Image objects.
Input was generated by ent.
"""
input ImageWhereInput {
  not: ImageWhereInput
  and: [ImageWhereInput!]
  or: [ImageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """width field predicates"""
  width: Int
  widthNEQ: Int
  widthIn: [Int!]
  widthNotIn: [Int!]
  widthGT: Int
  widthGTE: Int
  widthLT: Int
  widthLTE: Int
  """height field predicates"""
  height: Int
  heightNEQ: Int
  heightIn: [Int!]
  heightNotIn: [Int!]
  heightGT: Int
  heightGTE: Int
  heightLT: Int
  heightLTE: Int
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """dogs edge predicates"""
  hasDogs: Boolean
  hasDogsWith: [DogWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/OSBC-LLC/togo-subgraph-main/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Profile implements Node {
  id: ID!
  name: String!
  description: String!
  updatedAt: Time!
  createdAt: Time!
}
"""
ProfileWhereInput is used for filtering Profile objects.
Input was generated by ent.
"""
input ProfileWhereInput {
  not: ProfileWhereInput
  and: [ProfileWhereInput!]
  or: [ProfileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  userImageID: ID!
  profileID: ID!
  updatedAt: Time!
  createdAt: Time!
  profile: Profile!
  image: Image!
  dogprofiles: [DogProfileOwner!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """first_name field predicates"""
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """last_name field predicates"""
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """user_image_id field predicates"""
  userImageID: ID
  userImageIDNEQ: ID
  userImageIDIn: [ID!]
  userImageIDNotIn: [ID!]
  """profile_id field predicates"""
  profileID: ID
  profileIDNEQ: ID
  profileIDIn: [ID!]
  profileIDNotIn: [ID!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """profile edge predicates"""
  hasProfile: Boolean
  hasProfileWith: [ProfileWhereInput!]
  """image edge predicates"""
  hasImage: Boolean
  hasImageWith: [ImageWhereInput!]
  """dogProfiles edge predicates"""
  hasDogProfiles: Boolean
  hasDogProfilesWith: [DogProfileOwnerWhereInput!]
}
